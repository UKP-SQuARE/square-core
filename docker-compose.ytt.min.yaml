#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
---
#@ def skill_image_name(skill):
#@ return "ukpsquare/skills-" + skill.name + ":" + data.values.tag
#@ end

#@ def skill_build(skill):
#@ return {"context": "./skills", "dockerfile": "./" + skill.name + ".Dockerfile"}
#@ end

#@ def skill_environment(skill):
WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
SQUARE_API_URL: #@ data.values.square_api_url[data.values.environment]
KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
REALM:  #@ data.values.realm
CLIENT_ID: #@ skill.author + "-" + skill.name
#@ end

#@ def skill_env_file(skill):
#@ return ["./skills/" + skill.name + "/.env"]
#@ end

#@ def frontend_traefik_redirect():
#@ if data.values.environment == "production":
#@  return [
#@    "traefik.http.routers.frontend.rule=Host(`" + data.values.frontend_url[data.values.environment] + "`) || Host(`square.ukp.informatik.tu-darmstadt.de`)",
#@    "traefik.http.routers.frontend.middlewares=tuda-redirect",
#@    "traefik.http.middlewares.tuda-redirect.redirectregex.regex=^https://square.ukp.informatik.tu-darmstadt.de/(.*)",
#@    "traefik.http.middlewares.tuda-redirect.redirectregex.replacement=https://" + data.values.frontend_url[data.values.environment] + "/$${1}",
#@    "traefik.http.middlewares.tuda-redirect.redirectregex.permanent=true"
#@  ]
#@ else:
#@  return [
#@    "traefik.http.routers.frontend.rule=Host(`" + data.values.frontend_url[data.values.environment] + "`)"
#@  ]
#@ end
#@ end

#@ def traefik_tls(service):
#@ return [
#@  "traefik.http.routers." + service + ".entrypoints=websecure",
#@  "traefik.http.routers." + service + ".tls=true",
#@  "traefik.http.routers." + service + ".tls.certresolver=le"
#@ ]
#@ end

#@ def traefik_prefix(service):
#@ return [
#@  "traefik.http.routers." + service + ".rule=PathPrefix(`/api/" + service + "`)",
#@  "traefik.http.routers." + service + ".middlewares=" + service + "-stripprefix," + service + "-addprefix",
#@  "traefik.http.middlewares." + service + "-stripprefix.stripprefix.prefixes=/api/" + service,
#@  "traefik.http.middlewares." + service + "-addprefix.addPrefix.prefix=/api"
#@  ]
#@ end

#@ def model_environment():
WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
VERIFY_ISSUER: #@ str(data.values.verify_issuer[data.values.environment])
KEYCLOAK_BASE_URL: #@  data.values.keycloak_base_url_https[data.values.environment]
#@ end

#@ def model_management_environment():
WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
VERIFY_ISSUER: #@ str(data.values.verify_issuer[data.values.environment])
KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
DOCKER_HOST_URL: #@ data.values.docker_host_url[data.values.os]
MODEL_API_IMAGE: #@ "ukpsquare/square-model-api-v1.1:" + data.values.tag
ONNX_VOLUME: model-inference_onnx-models
REALM: #@ data.values.realm
MONGO_HOST: mongodb
MONGO_PORT: 27017
#@ end

version: "3.4"

services:
  traefik:
    image: traefik:v2.8.7
    container_name: traefik
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --accesslog=true
      - --accesslog.format=json
      - --accesslog.filepath=/var/log/traefik/access.log.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - #@ "--certificatesresolvers.le.acme.email=" + data.values.email
      #@ if/end data.values.environment == "local":
      - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    labels:
      - "traefik.enable=true"
      #! Global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"

      #! Middleware redirect from HTTP to HTTPS
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=admin:${SQUARE_ADMIN_PASSWORD}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates

  mongodb:
    image: mongo:5.0.4
    restart: always
    volumes:
      - mongo-data:/data/db
    expose:
      - 27017
    env_file:
      - ./mongodb/.env

  rabbit:
    hostname: rabbit
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - ./rabbitmq/.env

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    env_file:
      - .env
      - ./redis/.env
    command: [ "redis-server", "--requirepass ${REDIS_PASSWORD}" ]


  main_model:
    image: #@ "ukpsquare/model-inference-transformer:" + data.values.tag
    build:
      context: ./model-inference
      args:
        - MODEL_TYPE=transformer
    command: uvicorn model_inference.main:app --host 0.0.0.0 --port 8000 --log-config logging.conf
    env_file:
      - ./rabbitmq/.env
      - ./redis/.env
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
      DOCKER_HOST_URL: #@ data.values.docker_host_url[data.values.os]
      CONFIG_PATH: /model_configs
      QUEUE: facebook-dpr-question_encoder-single-nq-base
      CONFIG_VOLUME: square-core_model_configs
      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
      - model_configs:/model_configs
      - onnx_models:/onnx_models
      - ./local_deploy:/local_deploy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.model-dpr.rule=PathPrefix(`/api/main`)"
      - "traefik.http.routers.model-dpr.entrypoints=websecure"
      - "traefik.http.routers.model-dpr.tls=true"
      - "traefik.http.routers.model-dpr.tls.certresolver=le"
      - "traefik.http.routers.model-dpr.middlewares=model-dpr-stripprefix,model-dpr-addprefix"
      - "traefik.http.middlewares.model-dpr-stripprefix.stripprefix.prefixes=/api/main"
      - "traefik.http.middlewares.model-dpr-addprefix.addPrefix.prefix=/api"

  tasb_worker:
    image: #@ "ukpsquare/model-inference-sentence-transformer:" + data.values.tag
    build:
      context: ./model-inference
      args:
        - MODEL_TYPE=sentence_transformer
    command: celery -A tasks worker -Q msmarco-distilbert-base-tas-b --loglevel=info
    volumes:
      - ./:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - model_configs:/model_configs
      - ./local_deploy:/local_deploy
    env_file:
      - ./rabbitmq/.env
      - ./redis/.env
      - ./model-inference/model_configurations/.env.distilbert_sentence_transformer
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
      DOCKER_HOST_URL: #@ data.values.docker_host_url[data.values.os]
      ONNX_VOLUME: onnx_models
      REALM: #@ data.values.realm
      CONFIG_PATH: /model_configs
      QUEUE: msmarco-distilbert-base-tas-b
      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
    depends_on:
      #! - maintaining
      - rabbit
      - redis

  onnx_bert_worker:
    build:
      context: ./model-inference
      dockerfile: ./dockerfiles/onnx/Dockerfile
    container_name: onnx_bert_worker
    command: celery -A tasks worker -Q bert-base-uncased-pf-squad-onnx --loglevel=info
    volumes:
      - ./:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - model_configs:/model_configs
      - ./local_deploy:/local_deploy
    env_file:
      - ./rabbitmq/.env
      - ./redis/.env
      - ./model-inference/model_configurations/.env.squad_bert_onnx
    environment:
      WEB_CONCURRENCY: "2"
      VERIFY_SSL: "0"
      KEYCLOAK_BASE_URL: http://keycloak:8080
      DOCKER_HOST_URL: https://172.17.0.1
      ONNX_VOLUME: onnx_models
      REALM: square
      CONFIG_PATH: /model_configs
      QUEUE: bert-base-uncased-pf-squad-onnx
      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
    depends_on:
      - rabbit
      - redis

### EXAMPLE ONNX MODELS
#  onnx_roberta_worker:
#    build:
#      context: ./model-inference
#      dockerfile: ./dockerfiles/onnx/Dockerfile
#    container_name: onnx_roberta_worker
#    command: celery -A tasks worker -Q roberta-base-pf-squad-onnx --loglevel=info
#    volumes:
#      - ./:/usr/src/app
#      - /var/run/docker.sock:/var/run/docker.sock
#      - model_configs:/model_configs
#      - ./local_deploy:/local_deploy
#    env_file:
#      - ./rabbitmq/.env
#      - ./redis/.env
#      - ./model-inference/model_configurations/.env.squad_roberta_onnx
#    environment:
#      WEB_CONCURRENCY: "2"
#      VERIFY_SSL: "0"
#      KEYCLOAK_BASE_URL: http://keycloak:8080
#      DOCKER_HOST_URL: https://172.17.0.1
#      ONNX_VOLUME: onnx_models
#      REALM: square
#      CONFIG_PATH: /model_configs
#      QUEUE: roberta-base-pf-squad-onnx
#      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
#    depends_on:
#      - rabbit
#      - redis
#  boolq_roberta_worker:
#    build:
#      context: ./model-inference
#      dockerfile: ./dockerfiles/onnx/Dockerfile
#    container_name: boolq_roberta_worker
#    command: celery -A tasks worker -Q roberta-base-pf-boolq-onnx --loglevel=info
#    volumes:
#    - ./:/usr/src/app
#    - /var/run/docker.sock:/var/run/docker.sock
#    - model_configs:/model_configs
#    - ./local_deploy:/local_deploy
#    env_file:
#    - ./rabbitmq/.env
#    - ./redis/.env
#    - ./model-inference/model_configurations/.env.boolq_roberta_onnx
#    environment:
#      WEB_CONCURRENCY: "2"
#      VERIFY_SSL: "0"
#      KEYCLOAK_BASE_URL: http://keycloak:8080
#      DOCKER_HOST_URL: https://172.17.0.1
#      ONNX_VOLUME: onnx_models
#      REALM: square
#      CONFIG_PATH: /model_configs
#      QUEUE: roberta-base-pf-boolq-onnx
#      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
#    depends_on:
#    - rabbit
#    - redis
#  quartz_roberta_worker:
#    build:
#      context: ./model-inference
#      dockerfile: ./dockerfiles/onnx/Dockerfile
#    container_name: quartz_roberta_worker
#    command: celery -A tasks worker -Q roberta-base-pf-quartz-onnx --loglevel=info
#    volumes:
#    - ./:/usr/src/app
#    - /var/run/docker.sock:/var/run/docker.sock
#    - model_configs:/model_configs
#    - ./local_deploy:/local_deploy
#    env_file:
#    - ./rabbitmq/.env
#    - ./redis/.env
#    - ./model-inference/model_configurations/.env.quartz_roberta_onnx
#    environment:
#      WEB_CONCURRENCY: "2"
#      VERIFY_SSL: "0"
#      KEYCLOAK_BASE_URL: http://keycloak:8080
#      DOCKER_HOST_URL: https://172.17.0.1
#      ONNX_VOLUME: onnx_models
#      REALM: square
#      CONFIG_PATH: /model_configs
#      QUEUE: roberta-base-pf-quartz-onnx
#      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
#    depends_on:
#    - rabbit
#    - redis
#  narrativeqa_worker:
#    build:
#      context: ./model-inference
#      dockerfile: ./dockerfiles/onnx/Dockerfile
#    container_name: narrativeqa_worker
#    command: celery -A tasks worker -Q narrativeqa-onnx --loglevel=info
#    volumes:
#    - ./:/usr/src/app
#    - /var/run/docker.sock:/var/run/docker.sock
#    - model_configs:/model_configs
#    - ./local_deploy:/local_deploy
#    env_file:
#    - ./rabbitmq/.env
#    - ./redis/.env
#    - ./model-inference/model_configurations/.env.narrativeqa_bart_onnx
#    environment:
#      WEB_CONCURRENCY: "2"
#      VERIFY_SSL: "0"
#      KEYCLOAK_BASE_URL: http://keycloak:8080
#      DOCKER_HOST_URL: https://172.17.0.1
#      ONNX_VOLUME: onnx_models
#      REALM: square
#      CONFIG_PATH: /model_configs
#      QUEUE: narrativeqa-onnx
#      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
#    depends_on:
#    - rabbit
#    - redis

    
  maintaining_worker:
    build:
      context: ./model-manager
      dockerfile: ./Dockerfile
    container_name: maintaining_worker
    command: celery -A tasks worker --loglevel=info
    volumes:
      - ./:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - ./local_deploy:/local_deploy
    env_file:
      - ./rabbitmq/.env
      - ./redis/.env
      - ./model-manager/.env
    environment:
      WEB_CONCURRENCY: "2"
      VERIFY_SSL: "0"
      KEYCLOAK_BASE_URL: http://keycloak:8080
      DOCKER_HOST_URL: https://172.17.0.1
      MONGO_INITDB_ROOT_USERNAME: root
      REALM: square
      CLIENT_ID: models
      CONFIG_VOLUME: square-core_model_configs
      CONFIG_PATH: /model_configs
      QUEUE: bert-base-uncased-pf-squad-onnx
      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
    depends_on:
      - maintaining
      - rabbit
      - redis

  maintaining:
    command: uvicorn model_manager.main:app --host 0.0.0.0 --port 9001 --log-config logging.conf
    container_name: maintaining
    build:
      context: ./model-manager
      dockerfile: Dockerfile
    ports:
      - 9001:9001
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    links:
    - mongodb
    depends_on:
    - mongodb
    env_file:
    - ./model-manager/.env
    - ./rabbitmq/.env
    - ./redis/.env
    environment:
      WEB_CONCURRENCY: "2"
      VERIFY_SSL: "0"
      KEYCLOAK_BASE_URL: http://keycloak:8080
      DOCKER_HOST_URL: https://172.17.0.1
      CONFIG_PATH: /model_configs
      CONFIG_VOLUME: square-core_model_configs
      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
      REALM: square
      CLIENT_ID: models
    labels:
    - traefik.enable=true
    - traefidk.http.routers.maintaining.rule=PathPrefix(`/api/models`)
    - traefik.http.routers.maintaining.entrypoints=websecure
    - traefik.http.routers.maintaining.tls=true
    - traefik.http.routers.maintaining.tls.certresolver=le
    - traefik.http.routers.maintaining.middlewares=maintaining-stripprefix,maintaining-addprefix
    - traefik.http.middlewares.maintaining-stripprefix.stripPrefixRegex.regex=/api/models
    - traefik.http.middlewares.maintaining-addprefix.addPrefix.prefix=/api

  datastore_api:
    privileged: true
    image: #@ "ukpsquare/square-datastore-api:" + data.values.tag
    build:
      context: ./datastore-api
      target: build
    depends_on:
      - datastore_es
      - mongodb
    ports:
      - "7000:7000"
    env_file:
      - ./mongodb/.env
      - ./datastore-api/.env
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      FAISS_PORT: 5000
      MODEL_API_URL: #@ data.values.model_url[data.values.environment]
      ES_URL: http://datastore_es:9200
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
      REALM: #@ data.values.realm
      VERIFY_ISSUER: #@ str(data.values.verify_issuer[data.values.environment])
      VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      SQUARE_PRIVATE_KEY_FILE: /local_deploy/private_key.pem
    volumes:
      - ./local_deploy:/local_deploy
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("datastores"))
      - "traefik.http.routers.datastores.rule=PathPrefix(`/api/datastores`)"
      - "traefik.http.routers.datastores.middlewares=datastores-stripprefix,datastores-addprefix"
      - "traefik.http.middlewares.datastores-stripprefix.stripPrefixRegex.regex=/api/[a-zA-Z0-9_-]+"
      - "traefik.http.middlewares.datastores-addprefix.addPrefix.prefix=/datastores"

  datastore_es:
    mem_limit: 512m
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    environment:
      - discovery.type=single-node
    volumes:
      - datastore-api-es:/usr/share/elasticsearch/data
    ports:
      - 7200:9200

  dozzle:
    image: amir20/dozzle:v4.0.1
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOZZLE_NO_ANALYTICS: "true"
      DOZZLE_LEVEL: DEBUG
      DOZZLE_BASE: /admin/logs
    labels:
      - traefik.enable=true
      - #@ template.replace(traefik_tls("dozzle"))
      - traefik.http.routers.dozzle.rule=PathPrefix(`/admin/logs`)
      - traefik.http.routers.dozzle.middlewares=auth

volumes:
  traefik-public-certificates:
  mongo-data:
    driver: local
  square-redis-data:
    driver: local
  datastore-api-es:
    driver: local
  model_configs:
    driver: local
  onnx_models:
    driver: local
