{
    "tests": [
        {
            "test_type": "MFT",
            "capability": "Vocabulary",
            "test_name": "A is COMP than B. Who is more / less COMP??",
            "test_name_description": "Compare person A and person B with different comparative adjective and test's models ability to understand the comparative words",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has necessary vocabulary and whether it has the ability to handle the importance of different words.",
            "test_cases": [
                {
                    "context": "Susan is richer than Marie.",
                    "question": "Who is less rich?",
                    "answer": "Marie",
                    "prediction": "Susan is richer than Marie",
                    "success_failed": "failed"
                },
                {
                    "context": "Susan is richer than Marie.",
                    "question": "Who is richer?",
                    "answer": "Susan",
                    "prediction": "Susan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is faster than Kelly.",
                    "question": "Who is less fast?",
                    "answer": "Kelly",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is faster than Kelly.",
                    "question": "Who is faster?",
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                }
            ],
            "total_cases": 4,
            "failed_cases": 2,
            "success_cases": 2,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "MFT",
            "capability": "Vocabulary",
            "test_name": "Intensifiers (very, super, extremely) and reducers (somewhat, kinda)",
            "test_name_description": "Test's model's ability to understand intensifiers(very, super, extremely) and reducers(somewhat, kinda)",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has necessary vocabulary and whether it has the ability to handle the importance of different words.",
            "test_cases": [
                {
                    "context": "Lisa is extremely happy about the project. Annie is happy about the project.",
                    "question": "Who is most happy about the project?",
                    "answer": "Lisa",
                    "prediction": "Annie",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is extremely happy about the project. Annie is happy about the project.",
                    "question": "Who is least happy about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is happy about the project. Lisa is extremely happy about the project.",
                    "question": "Who is most happy about the project?",
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is happy about the project. Lisa is extremely happy about the project.",
                    "question": "Who is least happy about the project?",
                    "answer": "Annie",
                    "prediction": "Lisa",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is happy about the project. Annie is somewhat happy about the project.",
                    "question": "Who is most happy about the project?",
                    "answer": "Lisa",
                    "prediction": "Annie",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is happy about the project. Annie is somewhat happy about the project.",
                    "question": "Who is least happy about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is somewhat happy about the project. Lisa is happy about the project.",
                    "question": "Who is most happy about the project?",
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is somewhat happy about the project. Lisa is happy about the project.",
                    "question": "Who is least happy about the project?",
                    "answer": "Annie",
                    "prediction": "Lisa",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is extremely happy about the project. Annie is somewhat happy about the project.",
                    "question": "Who is most happy about the project?",
                    "answer": "Lisa",
                    "prediction": "Annie",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is extremely happy about the project. Annie is somewhat happy about the project.",
                    "question": "Who is least happy about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is somewhat happy about the project. Lisa is extremely happy about the project.",
                    "question": "Who is most happy about the project?",
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is somewhat happy about the project. Lisa is extremely happy about the project.",
                    "question": "Who is least happy about the project?",
                    "answer": "Annie",
                    "prediction": "Lisa",
                    "success_failed": "failed"
                },
                {
                    "context": "Annie is super excited about the project. Nick is excited about the project.",
                    "question": "Who is most excited about the project?",
                    "answer": "Annie",
                    "prediction": "Nick",
                    "success_failed": "failed"
                },
                {
                    "context": "Annie is super excited about the project. Nick is excited about the project.",
                    "question": "Who is least excited about the project?",
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Nick is excited about the project. Annie is super excited about the project.",
                    "question": "Who is most excited about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Nick is excited about the project. Annie is super excited about the project.",
                    "question": "Who is least excited about the project?",
                    "answer": "Nick",
                    "prediction": "Annie",
                    "success_failed": "failed"
                },
                {
                    "context": "Annie is excited about the project. Nick is somewhat excited about the project.",
                    "question": "Who is most excited about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Annie is excited about the project. Nick is somewhat excited about the project.",
                    "question": "Who is least excited about the project?",
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Nick is somewhat excited about the project. Annie is excited about the project.",
                    "question": "Who is most excited about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Nick is somewhat excited about the project. Annie is excited about the project.",
                    "question": "Who is least excited about the project?",
                    "answer": "Nick",
                    "prediction": "Annie",
                    "success_failed": "failed"
                },
                {
                    "context": "Annie is super excited about the project. Nick is somewhat excited about the project.",
                    "question": "Who is most excited about the project?",
                    "answer": "Annie",
                    "prediction": "Nick",
                    "success_failed": "failed"
                },
                {
                    "context": "Annie is super excited about the project. Nick is somewhat excited about the project.",
                    "question": "Who is least excited about the project?",
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Nick is somewhat excited about the project. Annie is super excited about the project.",
                    "question": "Who is most excited about the project?",
                    "answer": "Annie",
                    "prediction": "Annie",
                    "success_failed": "success"
                },
                {
                    "context": "Nick is somewhat excited about the project. Annie is super excited about the project.",
                    "question": "Who is least excited about the project?",
                    "answer": "Nick",
                    "prediction": "Annie",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 24,
            "failed_cases": 11,
            "success_cases": 13,
            "failure_rate": 45.83,
            "success_rate": 54.17
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "size, shape, age, color",
            "test_name_description": "Test's model's ability to understand size, shape, age, color",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "There is a round green figure in the room.",
                    "question": "What shape is the figure?",
                    "answer": "round",
                    "prediction": "round green",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a round green figure in the room.",
                    "question": "What color is the figure?",
                    "answer": "green",
                    "prediction": "green",
                    "success_failed": "success"
                },
                {
                    "context": "There is a figure in the room. The figure is round and green.",
                    "question": "What shape is the figure?",
                    "answer": "round",
                    "prediction": "round and green",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a figure in the room. The figure is round and green.",
                    "question": "What color is the figure?",
                    "answer": "green",
                    "prediction": "green",
                    "success_failed": "success"
                },
                {
                    "context": "There is a new blue toy in the room.",
                    "question": "What age is the toy?",
                    "answer": "new",
                    "prediction": "blue",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a new blue toy in the room.",
                    "question": "What color is the toy?",
                    "answer": "blue",
                    "prediction": "blue",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is new and blue.",
                    "question": "What age is the toy?",
                    "answer": "new",
                    "prediction": "new and blue",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a toy in the room. The toy is new and blue.",
                    "question": "What color is the toy?",
                    "answer": "blue",
                    "prediction": "blue",
                    "success_failed": "success"
                },
                {
                    "context": "There is a square orange clock in the room.",
                    "question": "What shape is the clock?",
                    "answer": "square",
                    "prediction": "square orange",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a square orange clock in the room.",
                    "question": "What color is the clock?",
                    "answer": "orange",
                    "prediction": "square orange",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a clock in the room. The clock is square and orange.",
                    "question": "What shape is the clock?",
                    "answer": "square",
                    "prediction": "square and orange",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a clock in the room. The clock is square and orange.",
                    "question": "What color is the clock?",
                    "answer": "orange",
                    "prediction": "orange",
                    "success_failed": "success"
                }
            ],
            "total_cases": 12,
            "failed_cases": 7,
            "success_cases": 5,
            "failure_rate": 58.33,
            "success_rate": 41.67
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Profession vs nationality",
            "test_name_description": "Test's model's ability to understand profession and nationality",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Colin is an Indonesian secretary.",
                    "question": "What is Colin's job?",
                    "answer": "secretary",
                    "prediction": "an Indonesian secretary",
                    "success_failed": "failed"
                },
                {
                    "context": "Colin is an Indonesian secretary.",
                    "question": "What is Colin's nationality?",
                    "answer": "Indonesian",
                    "prediction": "Indonesian",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is a secretary. Colin is Indonesian.",
                    "question": "What is Colin's job?",
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is a secretary. Colin is Indonesian.",
                    "question": "What is Colin's nationality?",
                    "answer": "Indonesian",
                    "prediction": "Indonesian",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is Indonesian. Colin is a secretary.",
                    "question": "What is Colin's job?",
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is Indonesian. Colin is a secretary.",
                    "question": "What is Colin's nationality?",
                    "answer": "Indonesian",
                    "prediction": "Indonesian",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is Indonesian and a secretary.",
                    "question": "What is Colin's job?",
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is Indonesian and a secretary.",
                    "question": "What is Colin's nationality?",
                    "answer": "Indonesian",
                    "prediction": "Indonesian",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is a secretary and Indonesian.",
                    "question": "What is Colin's job?",
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Colin is a secretary and Indonesian.",
                    "question": "What is Colin's nationality?",
                    "answer": "Indonesian",
                    "prediction": "Indonesian",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is a Bangladeshi photographer.",
                    "question": "What is Tony's job?",
                    "answer": "photographer",
                    "prediction": "photographer",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is a Bangladeshi photographer.",
                    "question": "What is Tony's nationality?",
                    "answer": "Bangladeshi",
                    "prediction": "Bangladeshi",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is a photographer. Tony is Bangladeshi.",
                    "question": "What is Tony's job?",
                    "answer": "photographer",
                    "prediction": "photographer",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is a photographer. Tony is Bangladeshi.",
                    "question": "What is Tony's nationality?",
                    "answer": "Bangladeshi",
                    "prediction": "Bangladeshi",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is Bangladeshi. Tony is a photographer.",
                    "question": "What is Tony's job?",
                    "answer": "photographer",
                    "prediction": "photographer",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is Bangladeshi. Tony is a photographer.",
                    "question": "What is Tony's nationality?",
                    "answer": "Bangladeshi",
                    "prediction": "Bangladeshi",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is Bangladeshi and a photographer.",
                    "question": "What is Tony's job?",
                    "answer": "photographer",
                    "prediction": "photographer",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is Bangladeshi and a photographer.",
                    "question": "What is Tony's nationality?",
                    "answer": "Bangladeshi",
                    "prediction": "Bangladeshi",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is a photographer and Bangladeshi.",
                    "question": "What is Tony's job?",
                    "answer": "photographer",
                    "prediction": "photographer",
                    "success_failed": "success"
                },
                {
                    "context": "Tony is a photographer and Bangladeshi.",
                    "question": "What is Tony's nationality?",
                    "answer": "Bangladeshi",
                    "prediction": "Bangladeshi",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 1,
            "success_cases": 19,
            "failure_rate": 5.0,
            "success_rate": 95.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Animal vs Vehicle",
            "test_name_description": "Test's model's ability to understand different animals and vehicles.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Eleanor has a serpent and a truck.",
                    "question": "What animal does Eleanor have?",
                    "answer": "serpent",
                    "prediction": "serpent",
                    "success_failed": "success"
                },
                {
                    "context": "Eleanor has a serpent and a truck.",
                    "question": "What vehicle does Eleanor have?",
                    "answer": "truck",
                    "prediction": "a serpent and a truck",
                    "success_failed": "failed"
                },
                {
                    "context": "Eleanor has a truck and a serpent.",
                    "question": "What animal does Eleanor have?",
                    "answer": "serpent",
                    "prediction": "serpent",
                    "success_failed": "success"
                },
                {
                    "context": "Eleanor has a truck and a serpent.",
                    "question": "What vehicle does Eleanor have?",
                    "answer": "truck",
                    "prediction": "truck",
                    "success_failed": "success"
                },
                {
                    "context": "Wendy has a dog and a firetruck.",
                    "question": "What animal does Wendy have?",
                    "answer": "dog",
                    "prediction": "dog",
                    "success_failed": "success"
                },
                {
                    "context": "Wendy has a dog and a firetruck.",
                    "question": "What vehicle does Wendy have?",
                    "answer": "firetruck",
                    "prediction": "dog and a firetruck",
                    "success_failed": "failed"
                },
                {
                    "context": "Wendy has a firetruck and a dog.",
                    "question": "What animal does Wendy have?",
                    "answer": "dog",
                    "prediction": "dog",
                    "success_failed": "success"
                },
                {
                    "context": "Wendy has a firetruck and a dog.",
                    "question": "What vehicle does Wendy have?",
                    "answer": "firetruck",
                    "prediction": "a firetruck",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 8,
            "failed_cases": 3,
            "success_cases": 5,
            "failure_rate": 37.5,
            "success_rate": 62.5
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Animal vs Vehicle v2",
            "test_name_description": "Test's model's ability to understand different animals and vehicles.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Martin bought a rabbit. Lauren bought a car.",
                    "question": "Who bought an animal?",
                    "answer": "Martin",
                    "prediction": "Martin bought a rabbit",
                    "success_failed": "failed"
                },
                {
                    "context": "Martin bought a rabbit. Lauren bought a car.",
                    "question": "Who bought a vehicle?",
                    "answer": "Lauren",
                    "prediction": "Lauren",
                    "success_failed": "success"
                },
                {
                    "context": "Lauren bought a car. Martin bought a rabbit.",
                    "question": "Who bought an animal?",
                    "answer": "Martin",
                    "prediction": "Martin bought a rabbit",
                    "success_failed": "failed"
                },
                {
                    "context": "Lauren bought a car. Martin bought a rabbit.",
                    "question": "Who bought a vehicle?",
                    "answer": "Lauren",
                    "prediction": "Lauren",
                    "success_failed": "success"
                },
                {
                    "context": "John bought a cow. Jerry bought a firetruck.",
                    "question": "Who bought an animal?",
                    "answer": "John",
                    "prediction": "John bought a cow",
                    "success_failed": "failed"
                },
                {
                    "context": "John bought a cow. Jerry bought a firetruck.",
                    "question": "Who bought a vehicle?",
                    "answer": "Jerry",
                    "prediction": "John bought a cow. Jerry",
                    "success_failed": "failed"
                },
                {
                    "context": "Jerry bought a firetruck. John bought a cow.",
                    "question": "Who bought an animal?",
                    "answer": "John",
                    "prediction": "John bought a cow",
                    "success_failed": "failed"
                },
                {
                    "context": "Jerry bought a firetruck. John bought a cow.",
                    "question": "Who bought a vehicle?",
                    "answer": "Jerry",
                    "prediction": "Jerry",
                    "success_failed": "success"
                }
            ],
            "total_cases": 8,
            "failed_cases": 5,
            "success_cases": 3,
            "failure_rate": 62.5,
            "success_rate": 37.5
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Synonyms",
            "test_name_description": "Test's model's ability to understand synonyms.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Ray is very courageous. Andrew is very vocal.",
                    "question": "Who is brave?",
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is very courageous. Andrew is very vocal.",
                    "question": "Who is outspoken?",
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew is very vocal. Ray is very courageous.",
                    "question": "Who is brave?",
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew is very vocal. Ray is very courageous.",
                    "question": "Who is outspoken?",
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon is very brave. Emily is very religious.",
                    "question": "Who is courageous?",
                    "answer": "Sharon",
                    "prediction": "Sharon",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon is very brave. Emily is very religious.",
                    "question": "Who is spiritual?",
                    "answer": "Emily",
                    "prediction": "Emily",
                    "success_failed": "success"
                },
                {
                    "context": "Emily is very religious. Sharon is very brave.",
                    "question": "Who is courageous?",
                    "answer": "Sharon",
                    "prediction": "Sharon",
                    "success_failed": "success"
                },
                {
                    "context": "Emily is very religious. Sharon is very brave.",
                    "question": "Who is spiritual?",
                    "answer": "Emily",
                    "prediction": "Emily",
                    "success_failed": "success"
                }
            ],
            "total_cases": 8,
            "failed_cases": 0,
            "success_cases": 8,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "A is COMP than B. Who is antonym(COMP)? B",
            "test_name_description": "Compare person A and person B with different comparative adjective and test's model's ability to understand different comparative adjective and their antonyms",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Marilyn is happier than Stephanie.",
                    "question": "Who is sadder?",
                    "answer": "Stephanie",
                    "prediction": "Marilyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Marilyn is happier than Stephanie.",
                    "question": "Who is happier?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Stephanie is sadder than Marilyn.",
                    "question": "Who is sadder?",
                    "answer": "Stephanie",
                    "prediction": "Stephanie",
                    "success_failed": "success"
                },
                {
                    "context": "Stephanie is sadder than Marilyn.",
                    "question": "Who is happier?",
                    "answer": "Marilyn",
                    "prediction": "Stephanie is sadder than Marilyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Samuel is louder than Philip.",
                    "question": "Who is quieter?",
                    "answer": "Philip",
                    "prediction": "Samuel",
                    "success_failed": "failed"
                },
                {
                    "context": "Samuel is louder than Philip.",
                    "question": "Who is louder?",
                    "answer": "Samuel",
                    "prediction": "Samuel",
                    "success_failed": "success"
                },
                {
                    "context": "Philip is quieter than Samuel.",
                    "question": "Who is quieter?",
                    "answer": "Philip",
                    "prediction": "Philip",
                    "success_failed": "success"
                },
                {
                    "context": "Philip is quieter than Samuel.",
                    "question": "Who is louder?",
                    "answer": "Samuel",
                    "prediction": "Philip",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 8,
            "failed_cases": 4,
            "success_cases": 4,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "A is more X than B. Who is more antonym(X)? B. Who is less X? B. Who is more X? A. Who is less antonym(X)? A.",
            "test_name_description": "Compare person A and person B with different comparative adjective and test's model's ability to understand different comparative adjective and their antonyms",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Kim is more insecure than Ryan.",
                    "question": "Who is more insecure?",
                    "answer": "Kim",
                    "prediction": "Kim",
                    "success_failed": "success"
                },
                {
                    "context": "Kim is more insecure than Ryan.",
                    "question": "Who is less insecure?",
                    "answer": "Ryan",
                    "prediction": "Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Kim is more insecure than Ryan.",
                    "question": "Who is more secure?",
                    "answer": "Ryan",
                    "prediction": "Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Kim is more insecure than Ryan.",
                    "question": "Who is less secure?",
                    "answer": "Kim",
                    "prediction": "Kim",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is more secure than Kim.",
                    "question": "Who is more insecure?",
                    "answer": "Kim",
                    "prediction": "Ryan is more secure than Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Ryan is more secure than Kim.",
                    "question": "Who is less insecure?",
                    "answer": "Ryan",
                    "prediction": "Ryan",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is more secure than Kim.",
                    "question": "Who is more secure?",
                    "answer": "Ryan",
                    "prediction": "Ryan",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is more secure than Kim.",
                    "question": "Who is less secure?",
                    "answer": "Kim",
                    "prediction": "Ryan",
                    "success_failed": "failed"
                },
                {
                    "context": "Kim is less secure than Ryan.",
                    "question": "Who is more insecure?",
                    "answer": "Kim",
                    "prediction": "Kim",
                    "success_failed": "success"
                },
                {
                    "context": "Kim is less secure than Ryan.",
                    "question": "Who is less insecure?",
                    "answer": "Ryan",
                    "prediction": "Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Kim is less secure than Ryan.",
                    "question": "Who is more secure?",
                    "answer": "Ryan",
                    "prediction": "Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Kim is less secure than Ryan.",
                    "question": "Who is less secure?",
                    "answer": "Kim",
                    "prediction": "Kim",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is less insecure than Kim.",
                    "question": "Who is more insecure?",
                    "answer": "Kim",
                    "prediction": "Ryan",
                    "success_failed": "failed"
                },
                {
                    "context": "Ryan is less insecure than Kim.",
                    "question": "Who is less insecure?",
                    "answer": "Ryan",
                    "prediction": "Ryan",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is less insecure than Kim.",
                    "question": "Who is more secure?",
                    "answer": "Ryan",
                    "prediction": "Ryan",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is less insecure than Kim.",
                    "question": "Who is less secure?",
                    "answer": "Kim",
                    "prediction": "Ryan",
                    "success_failed": "failed"
                },
                {
                    "context": "Michael is more humble than Dan.",
                    "question": "Who is more humble?",
                    "answer": "Michael",
                    "prediction": "Michael",
                    "success_failed": "success"
                },
                {
                    "context": "Michael is more humble than Dan.",
                    "question": "Who is less humble?",
                    "answer": "Dan",
                    "prediction": "Michael",
                    "success_failed": "failed"
                },
                {
                    "context": "Michael is more humble than Dan.",
                    "question": "Who is more proud?",
                    "answer": "Dan",
                    "prediction": "Michael",
                    "success_failed": "failed"
                },
                {
                    "context": "Michael is more humble than Dan.",
                    "question": "Who is less proud?",
                    "answer": "Michael",
                    "prediction": "Michael",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is more proud than Michael.",
                    "question": "Who is more humble?",
                    "answer": "Michael",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is more proud than Michael.",
                    "question": "Who is less humble?",
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is more proud than Michael.",
                    "question": "Who is more proud?",
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is more proud than Michael.",
                    "question": "Who is less proud?",
                    "answer": "Michael",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Michael is less proud than Dan.",
                    "question": "Who is more humble?",
                    "answer": "Michael",
                    "prediction": "Michael",
                    "success_failed": "success"
                },
                {
                    "context": "Michael is less proud than Dan.",
                    "question": "Who is less humble?",
                    "answer": "Dan",
                    "prediction": "Michael",
                    "success_failed": "failed"
                },
                {
                    "context": "Michael is less proud than Dan.",
                    "question": "Who is more proud?",
                    "answer": "Dan",
                    "prediction": "Michael",
                    "success_failed": "failed"
                },
                {
                    "context": "Michael is less proud than Dan.",
                    "question": "Who is less proud?",
                    "answer": "Michael",
                    "prediction": "Michael",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is less humble than Michael.",
                    "question": "Who is more humble?",
                    "answer": "Michael",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is less humble than Michael.",
                    "question": "Who is less humble?",
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is less humble than Michael.",
                    "question": "Who is more proud?",
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is less humble than Michael.",
                    "question": "Who is less proud?",
                    "answer": "Michael",
                    "prediction": "Dan",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 32,
            "failed_cases": 16,
            "success_cases": 16,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "INV",
            "capability": "Robustness",
            "test_name": "Question typo",
            "test_name_description": "Test's model's ability to handle questions typos (whether changing the spelling of words in the questions changes the model's output)",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "This type of test capability test's model's capability to handle small changes in the input (typos, irrelevant sentence addition, question contraction etc.).",
            "test_cases": [
                {
                    "context": "2. The relative quiet of the Tatar attacks on Russia in the late 30s and early 40s of the 17th century is undoubtedly due to the occupation of Azov by the Don Cossacks. The Russian government did not want to start a war with Turkey, did not send troops and after a long occupation the Cossacks left the town in 1642. The builders of the Belgorod Line and residents of the southern Russian districts, by the increase of Tatar attacks, immediately felt the change in the situation on the lower reaches of the Don. 3. In summer of 1633, 2000 Budjak Tatars invaded the southern Polish land and began to ravage Podolia. Crown Field Hetman Stanislaw Koniecpolski camping with the Polish army at Bar, led the 2000 cavalry against the Tatars and forced them to retreat. He then crossed the Dniester and on 4 July at the Battle of Sasov Rog on the River Prut defeated enemy. Poles captured several Budjak mirzas, among whom was the son-in-law of Cantemir Mirza, freed all the captives and captured a large part of the loot. In August Silistrian Pasha, Abaza Pasha, led the Turkish troops came to the Polish border and encamped near Khotin . Koniecpolski with a Polish army  went out to meet the enemy and established fortified camp near the fortress Kamenetz-Podolsky. Initially Abaza Pasha entered into peace negotiations with Koniecpolski. On 19 September the Budjak Horde  under Kantemir Mirza arrived to help Abaza-Pasha. On 20 September Abaza-Pasha crossed the Dniester and Kantemir Mirza attacked the Polish position. On 23 September Abaza Pasha, confident of his numerical superiority, attacked the Polish camp near Kamenets, but was defeated and forced to retreat to Moldavia.",
                    "question": "Who were the enemies o fthe Budjak Tatars?",
                    "gold_answer": "the Polish army",
                    "prediction_before_change": "The builders of the Belgorod Line and residents of the southern Russian districts",
                    "prediction": "Don Cossacks. The Russian government did not want to start a war with Turkey, did not send troops and after a long occupation the Cossacks left the town in 1642. The builders of the Belgorod Line and residents of the southern Russian districts",
                    "changed": {
                        "from": [
                            "of",
                            "the"
                        ],
                        "to": [
                            "o",
                            "fthe"
                        ]
                    },
                    "success_failed": "failed",
                    "where": "question"
                },
                {
                    "context": "The film opens in 1940, with Lawrence in a screening room watching a documentary film chronicling her life, then flashes back to Clapham in 1915, when she leaves home to join her vaudevillian father in a dilapidated Brixton music hall. Eventually she joins the chorus in Andr\u00e9 Charlot's West End revue. She reunites with close childhood friend No\u00ebl Coward who provides witty commentary on Gertie's actions.\nCharlot becomes annoyed with Gertie's efforts to stand out, literally, from the chorus. He threatens to fire her, but stage manager Jack Roper intercedes and gets her hired as a general understudy to the leads.  She marries Jack, but it becomes clear she is more inclined to perform onstage than stay home and play wife. While pregnant, she insists on going on for an absent star, and captivates the audience with her own star-making performance of \"Burlington Bertie\". Charlot and Roper witness the audience's warm approval, and both realize, Charlot grudgingly and Roper wistfully, that Gertie belongs on the stage.\nAfter their daughter Pamela is born, Gertrude is angered when Roper takes the baby on a pub crawl, and leaves him. A subsequent courtship with Sir Anthony Spencer, an English nobleman, polishes Gertie's rough edges and transforms her into a lady. Caught at a chic supper club when she is supposed to be on a sick day, she is fired from the Charlot Revue. Squired by Spencer, she becomes a 'society darling'. Coward then convinces Charlot to feature her in his new production, and she is finally recognized as a star. When the revue opens in New York City, she dallies with an actor and a banker, bringing the number of her suitors to three.",
                    "question": "What is the nickname of the person who wishes to perform onstage rathre than stay at home and play wife?",
                    "gold_answer": "Gertie",
                    "prediction_before_change": "Burlington Bertie",
                    "prediction": "Burlington Bertie",
                    "changed": {
                        "from": [
                            "rather"
                        ],
                        "to": [
                            "rathre"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "Alex, living in Venice Beach, is a struggling writer. One day, he meets Reena at the beach. They spend time together and Alex starts to fall in love with her. However, some days later, Reena disappears at LAX. The only thing Alex knows about her is that she's from Thakur Village, Mumbai, India - so he follows her there. In India, he discovers, with the help of his new driver Priyad that Reena is the greatest film star of Bollywood and engaged to Shekar, an influential Bollywood producer. Alex stays with Bobby K., a friend of Reena and a big Bollywood actor himself - while Alex is struggling with his own romance, Bobby starts to fall for his choreographer, Alisha, an old friend from his past he very much disappointed by simply forgetting about her when he became famous. Reena, hesitant to break off an engagement arranged by her parents, feels that she owes Shekhar her entire career, while Alex is struggling with Reena's mother and Shekhar himself, who both feel that Reena and Alex might be too interested in each other. Bobby K. meanwhile, after a broken down car, gets stuck with Alisha in some abandoned hut at the beach, they have an opportunity to talk and make up, however shortly afterwards, a misunderstanding occurs and Alisha feels betrayed all over again. Reena, meanwhile, tells Alex to leave, as she is going to accept her family's wishes and will marry Shekhar in order to preserve the tradition of an arranged marriage. Alex is all ready to leave India and Bobby finds out that Shekhar is having an affair with a co-worker (The entire affair is caught on CD). Reena's parents tell her not give up her happiness and tell her to go after Alex, Bobby clarifies the misunderstanding between him and Alisha and makes her pursue her dreams and Reena stops Alex to leave the country after a rickshaw chase. Everything ends well and Reena and Alex, after professing their love for each other, get married.",
                    "question": "Whata re the names of the two people who get married?",
                    "gold_answer": "Reena",
                    "prediction_before_change": "Reena and Alex",
                    "prediction": "Alisha",
                    "changed": {
                        "from": [
                            "What",
                            "are"
                        ],
                        "to": [
                            "Whata",
                            "re"
                        ]
                    },
                    "success_failed": "failed",
                    "where": "question"
                }
            ],
            "total_cases": 3,
            "failed_cases": 2,
            "success_cases": 1,
            "failure_rate": 66.67,
            "success_rate": 33.33
        },
        {
            "test_type": "INV",
            "capability": "Robustness",
            "test_name": "Question contractions",
            "test_name_description": "Test's model's ability to handle contraction in questions (whether contractions (what is -> what's) in the questions changes the model's output)",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "This type of test capability test's model's capability to handle small changes in the input (typos, irrelevant sentence addition, question contraction etc.).",
            "test_cases": [
                {
                    "context": "In 2002, in Norwich, England, UK, 10-year-old Zak Bevis is engrossed by the WWF (now WWE) King of the Ring pay-per-view event until his younger sister Saraya changes the channel to her favorite program, Charmed. The siblings wrestle, urged on by their parents Rick and Julia. Rick books the children for their first wrestling match where Saraya, initially reluctant to wrestle a boy, goes on to win as planned.\nAt 18, competing under the ring name \"Britani Knight\", Saraya and her brother \"Zak Zodiac\" help their parents train prospective wrestlers while working toward their own promotion. Rick and Julia, struggling financially, ask WWE trainer Hutch Morgan to sign the siblings. He finally agrees to a tryout before a SmackDown taping at The O2 Arena, and tells Saraya to find a different name as they \"already have a Britani\". The siblings receive advice from Dwayne Johnson, and Saraya adopts the name Paige from her favorite character on Charmed. \nThe two try out with several other wrestlers and are all belittled by Morgan. He ultimately chooses Paige over the rest, despite her attempt to have Zak signed as well. With her brother's encouragement, Paige leaves for America while Zak continues wrestling on the British independent circuit, assisting his parents' wrestling school, and tending to his girlfriend and newborn son.\nArriving at NXT in Florida, Paige has difficulty adjusting to the WWE style of entertainment \u2013 chiefly, the absence of intergender competition and the inexperience of her fellow female trainees Jeri-Lynn, Kirsten, & Maddison. Paige struggles with performing promos and Morgan's constant belittlement. Morgan makes it clear to Zak that he will never be signed to WWE, and Zak falls into alcoholism. Paige discovers her parents are selling merchandise of her likeness without her permission and have booked her in a match against Zak scheduled for her Christmas break.",
                    "question": "What're the first names of the siblings who wrestle?",
                    "gold_answer": "Zak",
                    "prediction_before_change": "Rick and Julia",
                    "prediction": "Rick and Julia",
                    "changed": {
                        "from": [
                            "What are"
                        ],
                        "to": [
                            "What're"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "A steam turbine consists of one or more rotors (rotating discs) mounted on a drive shaft, alternating with a series of stators (static discs) fixed to the turbine casing. The rotors have a propeller-like arrangement of blades at the outer edge. Steam acts upon these blades, producing rotary motion. The stator consists of a similar, but fixed, series of blades that serve to redirect the steam flow onto the next rotor stage. A steam turbine often exhausts into a surface condenser that provides a vacuum. The stages of a steam turbine are typically arranged to extract the maximum potential work from a specific velocity and pressure of steam, giving rise to a series of variably sized high- and low-pressure stages. Turbines are only efficient if they rotate at relatively high speed, therefore they are usually connected to reduction gearing to drive lower speed applications, such as a ship's propeller. In the vast majority of large electric generating stations, turbines are directly connected to generators with no reduction gearing. Typical speeds are 3600 revolutions per minute (RPM) in the USA with 60 Hertz power, 3000 RPM in Europe and other countries with 50 Hertz electric power systems. In nuclear power applications the turbines typically run at half these speeds, 1800 RPM and 1500 RPM. A turbine rotor is also only capable of providing power when rotating in one direction. Therefore, a reversing stage or gearbox is usually required where power is required in the opposite direction.[citation needed]",
                    "question": "What's another way of referring to stators?",
                    "gold_answer": "static discs",
                    "prediction_before_change": "static discs",
                    "prediction": "static discs",
                    "changed": {
                        "from": [
                            "What is"
                        ],
                        "to": [
                            "What's"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                }
            ],
            "total_cases": 2,
            "failed_cases": 0,
            "success_cases": 2,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "INV",
            "capability": "Robustness",
            "test_name": "Add random sentence to context",
            "test_name_description": "Test's model's ability to handle addition of random sentences in the model's input context (whether addition of a random sentence at the beginning and end of the input context changes model's output).",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "c_description": "This type of test capability test's model's capability to handle small changes in the input (typos, irrelevant sentence addition, question contraction etc.).",
            "test_cases": [
                {
                    "context": " Hoping to rebound from their loss to the Patriots, the Raiders stayed at home for a Week 16 duel with the Houston Texans.  Oakland would get the early lead in the first quarter as quarterback JaMarcus Russell completed a 20-yard touchdown pass to rookie wide receiver Chaz Schilens.  The Texans would respond with fullback Vonta Leach getting a 1-yard touchdown run, yet the Raiders would answer with kicker Sebastian Janikowski getting a 33-yard and a 30-yard field goal.  Houston would tie the game in the second quarter with kicker Kris Brown getting a 53-yard and a 24-yard field goal. Oakland would take the lead in the third quarter with wide receiver Johnnie Lee Higgins catching a 29-yard touchdown pass from Russell, followed up by an 80-yard punt return for a touchdown.  The Texans tried to rally in the fourth quarter as Brown nailed a 40-yard field goal, yet the Raiders' defense would shut down any possible attempt.The sedimentary sequences of the mid-continental United States and the Grand Canyon in the southwestern United States contain almost-undeformed stacks of sedimentary rocks that have remained in place since Cambrian time. ",
                    "question": "How many yards was the longest touchdown of the game?",
                    "prediction_before_change": "20",
                    "gold_answer": "80-yard punt return",
                    "prediction": "20",
                    "span": [
                        931,
                        1152
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "The sedimentary sequences of the mid-continental United States and the Grand Canyon in the southwestern United States contain almost-undeformed stacks of sedimentary rocks that have remained in place since Cambrian time.  Hoping to rebound from their loss to the Patriots, the Raiders stayed at home for a Week 16 duel with the Houston Texans.  Oakland would get the early lead in the first quarter as quarterback JaMarcus Russell completed a 20-yard touchdown pass to rookie wide receiver Chaz Schilens.  The Texans would respond with fullback Vonta Leach getting a 1-yard touchdown run, yet the Raiders would answer with kicker Sebastian Janikowski getting a 33-yard and a 30-yard field goal.  Houston would tie the game in the second quarter with kicker Kris Brown getting a 53-yard and a 24-yard field goal. Oakland would take the lead in the third quarter with wide receiver Johnnie Lee Higgins catching a 29-yard touchdown pass from Russell, followed up by an 80-yard punt return for a touchdown.  The Texans tried to rally in the fourth quarter as Brown nailed a 40-yard field goal, yet the Raiders' defense would shut down any possible attempt.",
                    "question": "How many yards was the longest touchdown of the game?",
                    "prediction_before_change": "20",
                    "gold_answer": "80-yard punt return",
                    "prediction": "29",
                    "span": [
                        0,
                        221
                    ],
                    "success_failed": "failed"
                },
                {
                    "context": "Foghorn Leghorn is filing his nails when Widow Hen comes by and asks a curmudgeonly old rooster Mr. Cackle to watch her young son, Junior, while she goes out. Mr. Cackle refuses, claiming Junior is destructive, disrespectful and incorrigible (\"ME babysit with HIM?! You must be joshing!\"); in fact, Mr. Cackle calls Junior \"that Monster of Yourn\" and says Junior \"makes Dennis the Menace look like an angel.\" Mr. Cackle also points out that Junior is \"Bad, Bad, BAD!\". Foghorn overhears the proceedings and - hoping to silence Mr. Cackle from accusing Junior of things, and prove a point that \" there ain't no such thing as a bad boy\" - volunteers to watch Junior, who snickers : \"Oooh, he don't know me vewy well, do he?\". Just as Widow Hen goes, Foghorn promises that he and Junior will be friends, but Junior deliberately pokes Foghorn's bottom with a needle. Foghorn attempts to strangle Junior, but Mr. Cackle laughs at Foghorn's expense. Foghorn defends Junior by saying he was merely being \"playful.\"\nFoghorn first takes Junior to a box full of toys to play with while he takes a nap, but Junior scoffs and, after declaring them \"widdle kids' stuff,\" decides to cause trouble. First, upon finding a cement mixer in the barn, Junior decides to call a false alarm, which leads to Foghorn landing in the cement mixer; he comes out posed as Rodin's \"The Thinker\" statue (Junior: \"I'm not weawwy a scuwptor. It's just me mean widdle hobby!\"). Foghorn recovers and threatens to report Junior's misbehavior to Widow Hen, but Junior counters by warning that he'll tell his mother that Foghorn is still \"booking the horses\". Foghorn tries to laugh this off, and does - but Junior says \"And they're off!\", causing Foghorn to briefly mimick watching a horse race, only to realize in shock that he's been tricked again.58 (1891), was described by Faur\u00e9 as a novel kind of song suite, in its use of musical themes recurring over the cycle. ",
                    "question": "Who is the incorrigible child the son of?",
                    "prediction_before_change": "Junior",
                    "gold_answer": "Widow Hen",
                    "prediction": "Junior",
                    "span": [
                        1814,
                        1934
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "58 (1891), was described by Faur\u00e9 as a novel kind of song suite, in its use of musical themes recurring over the cycle. Foghorn Leghorn is filing his nails when Widow Hen comes by and asks a curmudgeonly old rooster Mr. Cackle to watch her young son, Junior, while she goes out. Mr. Cackle refuses, claiming Junior is destructive, disrespectful and incorrigible (\"ME babysit with HIM?! You must be joshing!\"); in fact, Mr. Cackle calls Junior \"that Monster of Yourn\" and says Junior \"makes Dennis the Menace look like an angel.\" Mr. Cackle also points out that Junior is \"Bad, Bad, BAD!\". Foghorn overhears the proceedings and - hoping to silence Mr. Cackle from accusing Junior of things, and prove a point that \" there ain't no such thing as a bad boy\" - volunteers to watch Junior, who snickers : \"Oooh, he don't know me vewy well, do he?\". Just as Widow Hen goes, Foghorn promises that he and Junior will be friends, but Junior deliberately pokes Foghorn's bottom with a needle. Foghorn attempts to strangle Junior, but Mr. Cackle laughs at Foghorn's expense. Foghorn defends Junior by saying he was merely being \"playful.\"\nFoghorn first takes Junior to a box full of toys to play with while he takes a nap, but Junior scoffs and, after declaring them \"widdle kids' stuff,\" decides to cause trouble. First, upon finding a cement mixer in the barn, Junior decides to call a false alarm, which leads to Foghorn landing in the cement mixer; he comes out posed as Rodin's \"The Thinker\" statue (Junior: \"I'm not weawwy a scuwptor. It's just me mean widdle hobby!\"). Foghorn recovers and threatens to report Junior's misbehavior to Widow Hen, but Junior counters by warning that he'll tell his mother that Foghorn is still \"booking the horses\". Foghorn tries to laugh this off, and does - but Junior says \"And they're off!\", causing Foghorn to briefly mimick watching a horse race, only to realize in shock that he's been tricked again.",
                    "question": "Who is the incorrigible child the son of?",
                    "prediction_before_change": "Junior",
                    "gold_answer": "Widow Hen",
                    "prediction": "Junior",
                    "span": [
                        0,
                        120
                    ],
                    "success_failed": "success"
                }
            ],
            "total_cases": 4,
            "failed_cases": 1,
            "success_cases": 3,
            "failure_rate": 25.0,
            "success_rate": 75.0
        },
        {
            "test_type": "INV",
            "capability": "NER",
            "test_name": "Change name everywhere",
            "test_name_description": "Test's model's capability to handle changing a name in the input context and also in the question (if it contains the name)(whether a name change in the context and the questions changes the model output).",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "NER (Named Entity Recognition) Tests model\u2019s ability to appropriately understand named entities.",
            "test_cases": [
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB James Diaz (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Josh McCown",
                        "to": "James Diaz"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB Joshua Bell helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "LaMont Jordan",
                        "to": "Joshua Bell"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR John Wilson for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Jerry Porter",
                        "to": "John Wilson"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Bradley completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Bradley in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Bradley completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Cutler",
                        "to": "Bradley"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Joseph Young got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Jason Elam",
                        "to": "Joseph Young"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT James Turner sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Gerard Warren",
                        "to": "James Turner"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Daniel Hernandez got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Jason Elam",
                        "to": "Daniel Hernandez"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR David Johnson for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Jerry Porter",
                        "to": "David Johnson"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Josh McCown (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB James Gonzalez helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "LaMont Jordan",
                        "to": "James Gonzalez"
                    },
                    "success_failed": "success"
                },
                {
                    "context": " Hoping to rebound from their embarrassing home loss to the Lions, the Raiders flew to Invesco Field at Mile High for an AFC West duel with the Denver Broncos.  In the first quarter, Oakland trailed early as Broncos QB Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley for the only score of the period.  In the second quarter, the Raiders got on the board with kicker Sebastian Janikowski getting a 38-yard field goal.  However, Denver continued to pound away as RB Cecil Sapp got a 4-yard TD run, while kicker Jason Elam got a 23-yard field goal. In the third quarter, Oakland began to come back as QB Christopher Baker (who was a gametime decision heading into the game) completed a 46-yard TD pass to WR Jerry Porter for the only score of the period.  In the fourth quarter, the Raiders took the lead as DT Gerard Warren sacked Cutler in the end zone for a safety, while LB Thomas Howard returned an interception 44 yards for a touchdown (followed by a successful two-point conversion pass from McCown to WR Ronald Curry).  However, the Broncos tied the game up with Elam's 20-yard field goal.  In overtime, Oakland managed to make Denver go three-and-out on their first possession.  A 33-yard run by RB LaMont Jordan helped set up Janikowski for a game-winning 52-yard field goal. Broncos head coach Mike Shanahan called timeout before the kick could begin.  Janikowski's second try hit off the very tip of the left goal post and was no good, giving Denver a chance to win the game.  The Broncos won with Elam getting a 23-yard field goal. With the loss, not only did the Raiders fall to 0-2, but they had lost 11-straight games (currently the NFL's longest losing streak) dating back to Week 9 of the 2006 season.",
                    "question": "Which position scored the touchdown of the game?",
                    "prediction_before_change": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "gold_answer": "QB",
                    "prediction": "Jay Cutler completed a 9-yard TD pass to WR Brandon Stokley",
                    "changed": {
                        "from": "Josh McCown",
                        "to": "Christopher Baker"
                    },
                    "success_failed": "success"
                }
            ],
            "total_cases": 10,
            "failed_cases": 0,
            "success_cases": 10,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "INV",
            "capability": "NER",
            "test_name": "Change location everywhere",
            "test_name_description": "Test's model's capability to handle changing a location in the input context and also in the question (if it contains the name)(whether a location change in the context and the question changes the model output).",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "NER (Named Entity Recognition) Tests model\u2019s ability to appropriately understand named entities.",
            "test_cases": [
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in China. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to San Francisco for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "Italy",
                        "to": "China"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Italy. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to Nashville-Davidson for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "San Francisco",
                        "to": "Nashville-Davidson"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Italy. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to Lincoln for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "San Francisco",
                        "to": "Lincoln"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in France. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to San Francisco for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "Italy",
                        "to": "France"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Italy. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to Norfolk for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "San Francisco",
                        "to": "Norfolk"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in China. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to San Francisco for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "Italy",
                        "to": "China"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Mozambique. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to San Francisco for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "Italy",
                        "to": "Mozambique"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Italy. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to Chicago for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "San Francisco",
                        "to": "Chicago"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Italy. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in Washington City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in Washington for two years and then moves on to San Francisco for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "New York",
                        "to": "Washington"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "One day, Molly Standing is picking apples in her father's apple orchard in California, with her friend Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters and his mother, who are wealthy art patrons, hear Molly singing, and, at Gerald's suggestion, since he is very attracted to her, they sponsor her to study in Italy. Molly is reluctant to go but finally accepts when she discovers her father is in need of money. She leaves on the day that Tommy had hoped would be their wedding day. He says goodbye to her before attending Gertie and Gus's wedding ceremony.\nMolly becomes a success in Rome. She returns to the United States to sing at the Metropolitan Opera House in New York City, where she is again a great success. After the performance, Tommy attends the party which has been given by Gerald and his mother. Molly asks Tommy to sing, but her society friends do not think much of his singing. Realizing that Molly now lives in a world far apart from his, Tommy breaks off his engagement and returns to the orchards.\nMolly stays in New York for two years and then moves on to Wichita for a concert stop. Although she is supposed to marry Gerald soon, she is unhappy. She goes to her father's orchards to visit her old friend Gertie, to see how things are going with her. She happens to run into Tommy, and they rekindle their love and are married. Before they leave on their honeymoon, the doctor informs Molly's manager and Tommy that Schilling has lost her voice and will never sing again, except perhaps, a lullaby.",
                    "question": "What is the full name of the person who is a great success in their new singing job after studying abroad?",
                    "prediction_before_change": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "gold_answer": "Molly Standing",
                    "prediction": "Gertie, when they meet two boys, Tommy Melville and Gus Schultz. Molly falls in love with Tommy while Gertie falls in love with Gus. They plan a double wedding.\nGerald Winters",
                    "changed": {
                        "from": "San Francisco",
                        "to": "Wichita"
                    },
                    "success_failed": "success"
                }
            ],
            "total_cases": 10,
            "failed_cases": 4,
            "success_cases": 6,
            "failure_rate": 40.0,
            "success_rate": 60.0
        },
        {
            "test_type": "MFT",
            "capability": "Temporal",
            "test_name": "There was a change in profession",
            "test_name_description": "Test's model's ability to understand changes in profession over time.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to understand order of events.",
            "test_cases": [
                {
                    "context": "Both Andrea and Emma were attorneys, but there was a change in Andrea, who is now an economist.",
                    "question": "Who is an economist?",
                    "answer": "Andrea",
                    "prediction": "Andrea",
                    "success_failed": "success"
                },
                {
                    "context": "Both Emma and Andrea were attorneys, but there was a change in Andrea, who is now an economist.",
                    "question": "Who is an economist?",
                    "answer": "Andrea",
                    "prediction": "Andrea",
                    "success_failed": "success"
                },
                {
                    "context": "Both Lynn and Elaine were investigators, but there was a change in Lynn, who is now a DJ.",
                    "question": "Who is a DJ?",
                    "answer": "Lynn",
                    "prediction": "Lynn",
                    "success_failed": "success"
                },
                {
                    "context": "Both Elaine and Lynn were investigators, but there was a change in Lynn, who is now a DJ.",
                    "question": "Who is a DJ?",
                    "answer": "Lynn",
                    "prediction": "Lynn",
                    "success_failed": "success"
                }
            ],
            "total_cases": 4,
            "failed_cases": 0,
            "success_cases": 4,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "MFT",
            "capability": "Temporal",
            "test_name": "Understanding before / after -> first / last.",
            "test_name_description": "Test's model's ability to understand changes before, after, first and last.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to understand order of events.",
            "test_cases": [
                {
                    "context": "Donald became a educator before Ruth did.",
                    "question": "Who became a educator first?",
                    "answer": "Donald",
                    "prediction": "Donald",
                    "success_failed": "success"
                },
                {
                    "context": "Donald became a educator before Ruth did.",
                    "question": "Who became a educator last?",
                    "answer": "Ruth",
                    "prediction": "Donald",
                    "success_failed": "failed"
                },
                {
                    "context": "Ruth became a educator after Donald did.",
                    "question": "Who became a educator first?",
                    "answer": "Donald",
                    "prediction": "Ruth",
                    "success_failed": "failed"
                },
                {
                    "context": "Ruth became a educator after Donald did.",
                    "question": "Who became a educator last?",
                    "answer": "Ruth",
                    "prediction": "Donald",
                    "success_failed": "failed"
                },
                {
                    "context": "Albert became a interpreter before Edwin did.",
                    "question": "Who became a interpreter first?",
                    "answer": "Albert",
                    "prediction": "Albert",
                    "success_failed": "success"
                },
                {
                    "context": "Albert became a interpreter before Edwin did.",
                    "question": "Who became a interpreter last?",
                    "answer": "Edwin",
                    "prediction": "Albert",
                    "success_failed": "failed"
                },
                {
                    "context": "Edwin became a interpreter after Albert did.",
                    "question": "Who became a interpreter first?",
                    "answer": "Albert",
                    "prediction": "Edwin",
                    "success_failed": "failed"
                },
                {
                    "context": "Edwin became a interpreter after Albert did.",
                    "question": "Who became a interpreter last?",
                    "answer": "Edwin",
                    "prediction": "Edwin",
                    "success_failed": "success"
                }
            ],
            "total_cases": 8,
            "failed_cases": 5,
            "success_cases": 3,
            "failure_rate": 62.5,
            "success_rate": 37.5
        },
        {
            "test_type": "MFT",
            "capability": "Negation",
            "test_name": "Negation in context, may or may not be in question",
            "test_name_description": "Test's model's capability to understand negation in both context and question.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to handle negation",
            "test_cases": [
                {
                    "context": "Scott is not an astronomer. Daniel is.",
                    "question": "Who is an astronomer?",
                    "answer": "Daniel",
                    "prediction": "Daniel",
                    "success_failed": "success"
                },
                {
                    "context": "Scott is not an astronomer. Daniel is.",
                    "question": "Who is not an astronomer?",
                    "answer": "Scott",
                    "prediction": "Scott",
                    "success_failed": "success"
                },
                {
                    "context": "Daniel is an astronomer. Scott is not.",
                    "question": "Who is an astronomer?",
                    "answer": "Daniel",
                    "prediction": "Daniel",
                    "success_failed": "success"
                },
                {
                    "context": "Daniel is an astronomer. Scott is not.",
                    "question": "Who is not an astronomer?",
                    "answer": "Scott",
                    "prediction": "Scott",
                    "success_failed": "success"
                },
                {
                    "context": "Lynn is not a model. Al is.",
                    "question": "Who is a model?",
                    "answer": "Al",
                    "prediction": "Al",
                    "success_failed": "success"
                },
                {
                    "context": "Lynn is not a model. Al is.",
                    "question": "Who is not a model?",
                    "answer": "Lynn",
                    "prediction": "Lynn",
                    "success_failed": "success"
                },
                {
                    "context": "Al is a model. Lynn is not.",
                    "question": "Who is a model?",
                    "answer": "Al",
                    "prediction": "Al",
                    "success_failed": "success"
                },
                {
                    "context": "Al is a model. Lynn is not.",
                    "question": "Who is not a model?",
                    "answer": "Lynn",
                    "prediction": "Lynn",
                    "success_failed": "success"
                }
            ],
            "total_cases": 8,
            "failed_cases": 0,
            "success_cases": 8,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "MFT",
            "capability": "Negation",
            "test_name": "Negation in question only.",
            "test_name_description": "Test's model's capability to understand negation in question.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to handle negation",
            "test_cases": [
                {
                    "context": "Ed is an architect. Roy is a model.",
                    "question": "Who is not an architect?",
                    "answer": "Roy",
                    "prediction": "Roy",
                    "success_failed": "success"
                },
                {
                    "context": "Ed is an architect. Roy is a model.",
                    "question": "Who is not a model?",
                    "answer": "Ed",
                    "prediction": "Ed is an architect. Roy",
                    "success_failed": "failed"
                },
                {
                    "context": "Roy is a model. Ed is an architect.",
                    "question": "Who is not an architect?",
                    "answer": "Roy",
                    "prediction": "Roy",
                    "success_failed": "success"
                },
                {
                    "context": "Roy is a model. Ed is an architect.",
                    "question": "Who is not a model?",
                    "answer": "Ed",
                    "prediction": "Roy",
                    "success_failed": "failed"
                },
                {
                    "context": "Bobby is an academic. Charles is an administrator.",
                    "question": "Who is not an academic?",
                    "answer": "Charles",
                    "prediction": "Bobby",
                    "success_failed": "failed"
                },
                {
                    "context": "Bobby is an academic. Charles is an administrator.",
                    "question": "Who is not an administrator?",
                    "answer": "Bobby",
                    "prediction": "Charles",
                    "success_failed": "failed"
                },
                {
                    "context": "Charles is an administrator. Bobby is an academic.",
                    "question": "Who is not an academic?",
                    "answer": "Charles",
                    "prediction": "Bobby",
                    "success_failed": "failed"
                },
                {
                    "context": "Charles is an administrator. Bobby is an academic.",
                    "question": "Who is not an administrator?",
                    "answer": "Bobby",
                    "prediction": "Charles",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 8,
            "failed_cases": 6,
            "success_cases": 2,
            "failure_rate": 75.0,
            "success_rate": 25.0
        },
        {
            "test_type": "MFT",
            "capability": "Fairness",
            "test_name": "M/F failure rates should be similar for different professions",
            "test_name_description": "Test's if the model has some bias towards a particular gender (M/F) for different professions.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's the model's gender(M/F) or racial bias",
            "test_cases": [
                {
                    "context": "Daniel is not a secretary, Diana is.",
                    "question": "Who is a secretary?",
                    "answer": "Diana",
                    "prediction": "Diana",
                    "success_failed": "success"
                },
                {
                    "context": "Diana is not a secretary, Daniel is.",
                    "question": "Who is a secretary?",
                    "answer": "Daniel",
                    "prediction": "Daniel",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew is not a secretary, Elaine is.",
                    "question": "Who is a secretary?",
                    "answer": "Elaine",
                    "prediction": "Elaine",
                    "success_failed": "success"
                },
                {
                    "context": "Elaine is not a secretary, Andrew is.",
                    "question": "Who is a secretary?",
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                }
            ],
            "total_cases": 4,
            "failed_cases": 0,
            "success_cases": 4,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "MFT",
            "capability": "Coref",
            "test_name": "Basic coref, he / she",
            "test_name_description": "Test's model's capability to understand he or she",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "Coref (Coreference) Test's model's ability to appropriately understand he / she.",
            "test_cases": [
                {
                    "context": "Ralph and Michelle are friends. He is an investigator, and she is an investor.",
                    "question": "Who is an investigator?",
                    "answer": "Ralph",
                    "prediction": "Ralph and Michelle",
                    "success_failed": "failed"
                },
                {
                    "context": "Ralph and Michelle are friends. He is an investigator, and she is an investor.",
                    "question": "Who is an investor?",
                    "answer": "Michelle",
                    "prediction": "Ralph and Michelle",
                    "success_failed": "failed"
                },
                {
                    "context": "Michelle and Ralph are friends. He is an investigator, and she is an investor.",
                    "question": "Who is an investigator?",
                    "answer": "Ralph",
                    "prediction": "Michelle and Ralph",
                    "success_failed": "failed"
                },
                {
                    "context": "Michelle and Ralph are friends. He is an investigator, and she is an investor.",
                    "question": "Who is an investor?",
                    "answer": "Michelle",
                    "prediction": "Michelle and Ralph",
                    "success_failed": "failed"
                },
                {
                    "context": "Ralph and Michelle are friends. She is an investor, and he is an investigator.",
                    "question": "Who is an investigator?",
                    "answer": "Ralph",
                    "prediction": "Ralph and Michelle",
                    "success_failed": "failed"
                },
                {
                    "context": "Ralph and Michelle are friends. She is an investor, and he is an investigator.",
                    "question": "Who is an investor?",
                    "answer": "Michelle",
                    "prediction": "Ralph and Michelle",
                    "success_failed": "failed"
                },
                {
                    "context": "Michelle and Ralph are friends. She is an investor, and he is an investigator.",
                    "question": "Who is an investigator?",
                    "answer": "Ralph",
                    "prediction": "Michelle and Ralph",
                    "success_failed": "failed"
                },
                {
                    "context": "Michelle and Ralph are friends. She is an investor, and he is an investigator.",
                    "question": "Who is an investor?",
                    "answer": "Michelle",
                    "prediction": "Michelle and Ralph",
                    "success_failed": "failed"
                },
                {
                    "context": "Ed and Anne are friends. He is an intern, and she is a writer.",
                    "question": "Who is an intern?",
                    "answer": "Ed",
                    "prediction": "Ed and Anne",
                    "success_failed": "failed"
                },
                {
                    "context": "Ed and Anne are friends. He is an intern, and she is a writer.",
                    "question": "Who is a writer?",
                    "answer": "Anne",
                    "prediction": "Ed and Anne",
                    "success_failed": "failed"
                },
                {
                    "context": "Anne and Ed are friends. He is an intern, and she is a writer.",
                    "question": "Who is an intern?",
                    "answer": "Ed",
                    "prediction": "Anne and Ed",
                    "success_failed": "failed"
                },
                {
                    "context": "Anne and Ed are friends. He is an intern, and she is a writer.",
                    "question": "Who is a writer?",
                    "answer": "Anne",
                    "prediction": "Anne and Ed",
                    "success_failed": "failed"
                },
                {
                    "context": "Ed and Anne are friends. She is a writer, and he is an intern.",
                    "question": "Who is an intern?",
                    "answer": "Ed",
                    "prediction": "Ed and Anne",
                    "success_failed": "failed"
                },
                {
                    "context": "Ed and Anne are friends. She is a writer, and he is an intern.",
                    "question": "Who is a writer?",
                    "answer": "Anne",
                    "prediction": "Ed and Anne",
                    "success_failed": "failed"
                },
                {
                    "context": "Anne and Ed are friends. She is a writer, and he is an intern.",
                    "question": "Who is an intern?",
                    "answer": "Ed",
                    "prediction": "Anne and Ed",
                    "success_failed": "failed"
                },
                {
                    "context": "Anne and Ed are friends. She is a writer, and he is an intern.",
                    "question": "Who is a writer?",
                    "answer": "Anne",
                    "prediction": "Anne and Ed",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 16,
            "failed_cases": 16,
            "success_cases": 0,
            "failure_rate": 100.0,
            "success_rate": 0.0
        },
        {
            "test_type": "MFT",
            "capability": "Coref",
            "test_name": "Basic coref, his / her",
            "test_name_description": "Test's model's capability to understand his or her.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "Coref (Coreference) Test's model's ability to appropriately understand he / she.",
            "test_cases": [
                {
                    "context": "Jerry and Sharon are friends. His mom is an engineer.",
                    "question": "Whose mom is an engineer?",
                    "answer": "Jerry",
                    "prediction": "Jerry and Sharon",
                    "success_failed": "failed"
                },
                {
                    "context": "Sharon and Jerry are friends. His mom is an engineer.",
                    "question": "Whose mom is an engineer?",
                    "answer": "Jerry",
                    "prediction": "Sharon and Jerry",
                    "success_failed": "failed"
                },
                {
                    "context": "Brian and Judy are friends. His mom is an organizer.",
                    "question": "Whose mom is an organizer?",
                    "answer": "Brian",
                    "prediction": "Brian and Judy",
                    "success_failed": "failed"
                },
                {
                    "context": "Judy and Brian are friends. His mom is an organizer.",
                    "question": "Whose mom is an organizer?",
                    "answer": "Brian",
                    "prediction": "Judy and Brian",
                    "success_failed": "failed"
                },
                {
                    "context": "Brian and Angela are friends. Her mom is a journalist.",
                    "question": "Whose mom is a journalist?",
                    "answer": "Angela",
                    "prediction": "Brian and Angela",
                    "success_failed": "failed"
                },
                {
                    "context": "Angela and Brian are friends. Her mom is a journalist.",
                    "question": "Whose mom is a journalist?",
                    "answer": "Angela",
                    "prediction": "Angela and Brian",
                    "success_failed": "failed"
                },
                {
                    "context": "Steven and Melissa are friends. Her mom is a historian.",
                    "question": "Whose mom is a historian?",
                    "answer": "Melissa",
                    "prediction": "Steven and Melissa",
                    "success_failed": "failed"
                },
                {
                    "context": "Melissa and Steven are friends. Her mom is a historian.",
                    "question": "Whose mom is a historian?",
                    "answer": "Melissa",
                    "prediction": "Melissa and Steven",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 8,
            "failed_cases": 8,
            "success_cases": 0,
            "failure_rate": 100.0,
            "success_rate": 0.0
        },
        {
            "test_type": "MFT",
            "capability": "Coref",
            "test_name": "Former / Latter",
            "test_name_description": "Test's model's capability to understand former and latter.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "Coref (Coreference) Test's model's ability to appropriately understand he / she.",
            "test_cases": [
                {
                    "context": "Walter and Scott are friends. The former is an economist.",
                    "question": "Who is an economist?",
                    "answer": "Walter",
                    "prediction": "Walter and Scott",
                    "success_failed": "failed"
                },
                {
                    "context": "Scott and Walter are friends. The latter is an economist.",
                    "question": "Who is an economist?",
                    "answer": "Walter",
                    "prediction": "Scott and Walter",
                    "success_failed": "failed"
                },
                {
                    "context": "Walter and Scott are friends. The former is an economist and the latter is an analyst.",
                    "question": "Who is an economist?",
                    "answer": "Walter",
                    "prediction": "Walter and Scott",
                    "success_failed": "failed"
                },
                {
                    "context": "Scott and Walter are friends. The former is an analyst and the latter is an economist.",
                    "question": "Who is an economist?",
                    "answer": "Walter",
                    "prediction": "Scott and Walter",
                    "success_failed": "failed"
                },
                {
                    "context": "George and Marilyn are friends. The former is an analyst.",
                    "question": "Who is an analyst?",
                    "answer": "George",
                    "prediction": "George and Marilyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Marilyn and George are friends. The latter is an analyst.",
                    "question": "Who is an analyst?",
                    "answer": "George",
                    "prediction": "Marilyn and George",
                    "success_failed": "failed"
                },
                {
                    "context": "George and Marilyn are friends. The former is an analyst and the latter is a historian.",
                    "question": "Who is an analyst?",
                    "answer": "George",
                    "prediction": "George and Marilyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Marilyn and George are friends. The former is a historian and the latter is an analyst.",
                    "question": "Who is an analyst?",
                    "answer": "George",
                    "prediction": "Marilyn and George",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 8,
            "failed_cases": 8,
            "success_cases": 0,
            "failure_rate": 100.0,
            "success_rate": 0.0
        },
        {
            "test_type": "MFT",
            "capability": "SRL",
            "test_name": "Agent / object distinction",
            "test_name_description": "Test's model's ability to understand distiction between agent and object.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "SRL (Semantic Role Labeling) Test's model's capability to understand different roles such as agents and objects.",
            "test_cases": [
                {
                    "context": "Charlotte remembers Emma.",
                    "question": "Who remembers?",
                    "answer": "Charlotte",
                    "prediction": "Charlotte",
                    "success_failed": "success"
                },
                {
                    "context": "Charlotte remembers Emma.",
                    "question": "Who is remembered?",
                    "answer": "Emma",
                    "prediction": "Emma",
                    "success_failed": "success"
                },
                {
                    "context": "Emma is remembered by Charlotte.",
                    "question": "Who remembers?",
                    "answer": "Charlotte",
                    "prediction": "Charlotte",
                    "success_failed": "success"
                },
                {
                    "context": "Emma is remembered by Charlotte.",
                    "question": "Who is remembered?",
                    "answer": "Emma",
                    "prediction": "Emma",
                    "success_failed": "success"
                },
                {
                    "context": "Elaine likes Carolyn.",
                    "question": "Who likes?",
                    "answer": "Elaine",
                    "prediction": "Elaine",
                    "success_failed": "success"
                },
                {
                    "context": "Elaine likes Carolyn.",
                    "question": "Who is liked?",
                    "answer": "Carolyn",
                    "prediction": "Carolyn",
                    "success_failed": "success"
                },
                {
                    "context": "Carolyn is liked by Elaine.",
                    "question": "Who likes?",
                    "answer": "Elaine",
                    "prediction": "Elaine",
                    "success_failed": "success"
                },
                {
                    "context": "Carolyn is liked by Elaine.",
                    "question": "Who is liked?",
                    "answer": "Carolyn",
                    "prediction": "Carolyn",
                    "success_failed": "success"
                }
            ],
            "total_cases": 8,
            "failed_cases": 0,
            "success_cases": 8,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "MFT",
            "capability": "SRL",
            "test_name": "Agent / object distinction with 3 agents",
            "test_name_description": "Test's model's capability to understand agents or object in case of three agents.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "SRL (Semantic Role Labeling) Test's model's capability to understand different roles such as agents and objects.",
            "test_cases": [
                {
                    "context": "Tim believes Marilyn. Marilyn believes Katie.",
                    "question": "Who believes Marilyn?",
                    "answer": "Tim",
                    "prediction": "Tim",
                    "success_failed": "success"
                },
                {
                    "context": "Tim believes Marilyn. Marilyn believes Katie.",
                    "question": "Who believes Katie?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Tim believes Marilyn. Marilyn believes Katie.",
                    "question": "Who is believed by Tim?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Tim believes Marilyn. Marilyn believes Katie.",
                    "question": "Who is believed by Marilyn?",
                    "answer": "Katie",
                    "prediction": "Katie",
                    "success_failed": "success"
                },
                {
                    "context": "Tim believes Marilyn. Katie is believed by Marilyn.",
                    "question": "Who believes Marilyn?",
                    "answer": "Tim",
                    "prediction": "Tim",
                    "success_failed": "success"
                },
                {
                    "context": "Tim believes Marilyn. Katie is believed by Marilyn.",
                    "question": "Who believes Katie?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Tim believes Marilyn. Katie is believed by Marilyn.",
                    "question": "Who is believed by Tim?",
                    "answer": "Marilyn",
                    "prediction": "Katie",
                    "success_failed": "failed"
                },
                {
                    "context": "Tim believes Marilyn. Katie is believed by Marilyn.",
                    "question": "Who is believed by Marilyn?",
                    "answer": "Katie",
                    "prediction": "Katie",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Marilyn believes Katie.",
                    "question": "Who believes Marilyn?",
                    "answer": "Tim",
                    "prediction": "Tim",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Marilyn believes Katie.",
                    "question": "Who believes Katie?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Marilyn believes Katie.",
                    "question": "Who is believed by Tim?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Marilyn believes Katie.",
                    "question": "Who is believed by Marilyn?",
                    "answer": "Katie",
                    "prediction": "Katie",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Katie is believed by Marilyn.",
                    "question": "Who believes Marilyn?",
                    "answer": "Tim",
                    "prediction": "Tim",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Katie is believed by Marilyn.",
                    "question": "Who believes Katie?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Katie is believed by Marilyn.",
                    "question": "Who is believed by Tim?",
                    "answer": "Marilyn",
                    "prediction": "Marilyn",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is believed by Tim. Katie is believed by Marilyn.",
                    "question": "Who is believed by Marilyn?",
                    "answer": "Katie",
                    "prediction": "Katie",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Ben likes Martha.",
                    "question": "Who likes Ben?",
                    "answer": "Sharon",
                    "prediction": "Sharon",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Ben likes Martha.",
                    "question": "Who likes Martha?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Ben likes Martha.",
                    "question": "Who is liked by Sharon?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Ben likes Martha.",
                    "question": "Who is liked by Ben?",
                    "answer": "Martha",
                    "prediction": "Martha",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Martha is liked by Ben.",
                    "question": "Who likes Ben?",
                    "answer": "Sharon",
                    "prediction": "Sharon",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Martha is liked by Ben.",
                    "question": "Who likes Martha?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Sharon likes Ben. Martha is liked by Ben.",
                    "question": "Who is liked by Sharon?",
                    "answer": "Ben",
                    "prediction": "Martha",
                    "success_failed": "failed"
                },
                {
                    "context": "Sharon likes Ben. Martha is liked by Ben.",
                    "question": "Who is liked by Ben?",
                    "answer": "Martha",
                    "prediction": "Martha",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Ben likes Martha.",
                    "question": "Who likes Ben?",
                    "answer": "Sharon",
                    "prediction": "Sharon",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Ben likes Martha.",
                    "question": "Who likes Martha?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Ben likes Martha.",
                    "question": "Who is liked by Sharon?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Ben likes Martha.",
                    "question": "Who is liked by Ben?",
                    "answer": "Martha",
                    "prediction": "Martha",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Martha is liked by Ben.",
                    "question": "Who likes Ben?",
                    "answer": "Sharon",
                    "prediction": "Sharon",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Martha is liked by Ben.",
                    "question": "Who likes Martha?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Martha is liked by Ben.",
                    "question": "Who is liked by Sharon?",
                    "answer": "Ben",
                    "prediction": "Ben",
                    "success_failed": "success"
                },
                {
                    "context": "Ben is liked by Sharon. Martha is liked by Ben.",
                    "question": "Who is liked by Ben?",
                    "answer": "Martha",
                    "prediction": "Martha",
                    "success_failed": "success"
                }
            ],
            "total_cases": 32,
            "failed_cases": 2,
            "success_cases": 30,
            "failure_rate": 6.25,
            "success_rate": 93.75
        }
    ]
}